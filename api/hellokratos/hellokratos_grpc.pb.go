// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hellokratos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HellokratosClient is the client API for Hellokratos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HellokratosClient interface {
	CreateHellokratos(ctx context.Context, in *CreateHellokratosRequest, opts ...grpc.CallOption) (*CreateHellokratosReply, error)
	UpdateHellokratos(ctx context.Context, in *UpdateHellokratosRequest, opts ...grpc.CallOption) (*UpdateHellokratosReply, error)
	DeleteHellokratos(ctx context.Context, in *DeleteHellokratosRequest, opts ...grpc.CallOption) (*DeleteHellokratosReply, error)
	GetHellokratos(ctx context.Context, in *GetHellokratosRequest, opts ...grpc.CallOption) (*GetHellokratosReply, error)
	ListHellokratos(ctx context.Context, in *ListHellokratosRequest, opts ...grpc.CallOption) (*ListHellokratosReply, error)
}

type hellokratosClient struct {
	cc grpc.ClientConnInterface
}

func NewHellokratosClient(cc grpc.ClientConnInterface) HellokratosClient {
	return &hellokratosClient{cc}
}

func (c *hellokratosClient) CreateHellokratos(ctx context.Context, in *CreateHellokratosRequest, opts ...grpc.CallOption) (*CreateHellokratosReply, error) {
	out := new(CreateHellokratosReply)
	err := c.cc.Invoke(ctx, "/api.hellokratos.Hellokratos/CreateHellokratos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellokratosClient) UpdateHellokratos(ctx context.Context, in *UpdateHellokratosRequest, opts ...grpc.CallOption) (*UpdateHellokratosReply, error) {
	out := new(UpdateHellokratosReply)
	err := c.cc.Invoke(ctx, "/api.hellokratos.Hellokratos/UpdateHellokratos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellokratosClient) DeleteHellokratos(ctx context.Context, in *DeleteHellokratosRequest, opts ...grpc.CallOption) (*DeleteHellokratosReply, error) {
	out := new(DeleteHellokratosReply)
	err := c.cc.Invoke(ctx, "/api.hellokratos.Hellokratos/DeleteHellokratos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellokratosClient) GetHellokratos(ctx context.Context, in *GetHellokratosRequest, opts ...grpc.CallOption) (*GetHellokratosReply, error) {
	out := new(GetHellokratosReply)
	err := c.cc.Invoke(ctx, "/api.hellokratos.Hellokratos/GetHellokratos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellokratosClient) ListHellokratos(ctx context.Context, in *ListHellokratosRequest, opts ...grpc.CallOption) (*ListHellokratosReply, error) {
	out := new(ListHellokratosReply)
	err := c.cc.Invoke(ctx, "/api.hellokratos.Hellokratos/ListHellokratos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HellokratosServer is the server API for Hellokratos service.
// All implementations must embed UnimplementedHellokratosServer
// for forward compatibility
type HellokratosServer interface {
	CreateHellokratos(context.Context, *CreateHellokratosRequest) (*CreateHellokratosReply, error)
	UpdateHellokratos(context.Context, *UpdateHellokratosRequest) (*UpdateHellokratosReply, error)
	DeleteHellokratos(context.Context, *DeleteHellokratosRequest) (*DeleteHellokratosReply, error)
	GetHellokratos(context.Context, *GetHellokratosRequest) (*GetHellokratosReply, error)
	ListHellokratos(context.Context, *ListHellokratosRequest) (*ListHellokratosReply, error)
	mustEmbedUnimplementedHellokratosServer()
}

// UnimplementedHellokratosServer must be embedded to have forward compatible implementations.
type UnimplementedHellokratosServer struct {
}

func (UnimplementedHellokratosServer) CreateHellokratos(context.Context, *CreateHellokratosRequest) (*CreateHellokratosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHellokratos not implemented")
}
func (UnimplementedHellokratosServer) UpdateHellokratos(context.Context, *UpdateHellokratosRequest) (*UpdateHellokratosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHellokratos not implemented")
}
func (UnimplementedHellokratosServer) DeleteHellokratos(context.Context, *DeleteHellokratosRequest) (*DeleteHellokratosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHellokratos not implemented")
}
func (UnimplementedHellokratosServer) GetHellokratos(context.Context, *GetHellokratosRequest) (*GetHellokratosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHellokratos not implemented")
}
func (UnimplementedHellokratosServer) ListHellokratos(context.Context, *ListHellokratosRequest) (*ListHellokratosReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHellokratos not implemented")
}
func (UnimplementedHellokratosServer) mustEmbedUnimplementedHellokratosServer() {}

// UnsafeHellokratosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HellokratosServer will
// result in compilation errors.
type UnsafeHellokratosServer interface {
	mustEmbedUnimplementedHellokratosServer()
}

func RegisterHellokratosServer(s grpc.ServiceRegistrar, srv HellokratosServer) {
	s.RegisterService(&Hellokratos_ServiceDesc, srv)
}

func _Hellokratos_CreateHellokratos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHellokratosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellokratosServer).CreateHellokratos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellokratos.Hellokratos/CreateHellokratos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellokratosServer).CreateHellokratos(ctx, req.(*CreateHellokratosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellokratos_UpdateHellokratos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHellokratosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellokratosServer).UpdateHellokratos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellokratos.Hellokratos/UpdateHellokratos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellokratosServer).UpdateHellokratos(ctx, req.(*UpdateHellokratosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellokratos_DeleteHellokratos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHellokratosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellokratosServer).DeleteHellokratos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellokratos.Hellokratos/DeleteHellokratos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellokratosServer).DeleteHellokratos(ctx, req.(*DeleteHellokratosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellokratos_GetHellokratos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHellokratosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellokratosServer).GetHellokratos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellokratos.Hellokratos/GetHellokratos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellokratosServer).GetHellokratos(ctx, req.(*GetHellokratosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellokratos_ListHellokratos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHellokratosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellokratosServer).ListHellokratos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellokratos.Hellokratos/ListHellokratos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellokratosServer).ListHellokratos(ctx, req.(*ListHellokratosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hellokratos_ServiceDesc is the grpc.ServiceDesc for Hellokratos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hellokratos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hellokratos.Hellokratos",
	HandlerType: (*HellokratosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHellokratos",
			Handler:    _Hellokratos_CreateHellokratos_Handler,
		},
		{
			MethodName: "UpdateHellokratos",
			Handler:    _Hellokratos_UpdateHellokratos_Handler,
		},
		{
			MethodName: "DeleteHellokratos",
			Handler:    _Hellokratos_DeleteHellokratos_Handler,
		},
		{
			MethodName: "GetHellokratos",
			Handler:    _Hellokratos_GetHellokratos_Handler,
		},
		{
			MethodName: "ListHellokratos",
			Handler:    _Hellokratos_ListHellokratos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hellokratos.proto",
}
